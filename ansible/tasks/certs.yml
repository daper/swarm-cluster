- set_fact:
    make_certs: False
- name: "Check etcd-ca docker image"
  command: "docker images daper/etcd-ca -q"
  register: etcd_ca
- name: "Build etcd-ca docker image"
  docker_image:
    path: ../certs
    name: daper/etcd-ca
  when: etcd_ca.stdout != ""
- name: "Get current user id"
  command: "id -u"
  register: user
- name: Check for existing certificates
  stat:
    path: "../certs/{{ item }}.crt"
  register: certs_stats
  with_inventory_hostnames:
    - all
- name: Decide wether to generate certificates
  set_fact:
    make_certs: True
  when: |
    certs_stats.results 
    | map(attribute='stat') 
    | selectattr('exists', 'equalto', False) 
    | list | count > 0
- name: Check for existing ca
  stat:
    path: "../certs/.etcd-ca"
  register: etcd_ca_stat
- name: Initialize ca
  docker_container:
    image: daper/etcd-ca
    name: "etcd-ca"
    command: "init --passphrase ''"
    volumes:
      - ../certs:/ca
    working_dir: /ca
    user: "{{ user.stdout }}:{{ user.stdout }}"
  when: etcd_ca_stat.stat.exists == False
- name: Remove etcd-ca container
  docker_container:
    name: etcd-ca
    state: absent
  when: etcd_ca_stat.stat.exists == False
- name: "Make certificates for every host"
  docker_container:
    image: daper/etcd-ca
    name: "etcd-ca-{{ item }}"
    entrypoint: bash
    command: "./gen.sh {{ item }} {{ hostvars[item].private_ip }}"
    volumes:
      - ../certs:/ca
    working_dir: /ca
    user: "{{ user.stdout }}:{{ user.stdout }}"
  with_inventory_hostnames:
    - all
  when: make_certs
- name: Remove etcd-ca container
  docker_container:
    name: "etcd-ca-{{ item }}"
    state: absent
  with_inventory_hostnames:
    - all
  when: make_certs